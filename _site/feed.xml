<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The dantou&#39;s blog</title>
    <description>Welcome to the dantou&#39;s blog!
</description>
    <link>http://blog.dantou.cc/</link>
    <atom:link href="http://blog.dantou.cc/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 01 May 2016 13:13:37 +0800</pubDate>
    <lastBuildDate>Sun, 01 May 2016 13:13:37 +0800</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>LeetCode---single-number</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;题目描述&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Given an array of integers, every element appears twice except for one. Find that single one.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section-1&quot;&gt;程序代码&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	
	public int singleNumber(int[] A) {
		int num = 0;
		for (int i = 0; i &amp;lt; A.length; i++) {
			num ^= A[i];
		}
		return num;
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sun, 01 May 2016 13:12:12 +0800</pubDate>
        <link>http://blog.dantou.cc/main/2016/05/01/LeetCode-single-number.html</link>
        <guid isPermaLink="true">http://blog.dantou.cc/main/2016/05/01/LeetCode-single-number.html</guid>
        
        
        <category>main</category>
        
      </item>
    
      <item>
        <title>LeetCode---maximum-subarray</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;题目描述&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Find the contiguous subarray within an array (containing at least one number) which has the largest sum.
For example, given the array[−2,1,−3,4,−1,2,1,−5,4], the contiguous subarray[4,−1,2,1]has the largest sum =6.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section-1&quot;&gt;程序代码&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	
	public int maxSubArray(int[] A) {

		if (A.length &amp;lt; 1) {
			return 0;
		}

		int max = A[0];
		int sum = max;

		for (int i = 1; i &amp;lt; A.length; i++) {

			if (sum &amp;lt; 0) {
				sum = A[i];
			} else {
				sum += A[i];
			}

			max = Math.max(max, sum);
		}

		return max;
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sun, 01 May 2016 12:17:37 +0800</pubDate>
        <link>http://blog.dantou.cc/main/2016/05/01/LeetCode-maximum-subarray.html</link>
        <guid isPermaLink="true">http://blog.dantou.cc/main/2016/05/01/LeetCode-maximum-subarray.html</guid>
        
        
        <category>main</category>
        
      </item>
    
      <item>
        <title>LeetCode---container-with-most-water</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;题目描述&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section-1&quot;&gt;程序代码&lt;/h1&gt;

&lt;h2 id=&quot;on2&quot;&gt;1.o(n2)&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	
	public int maxArea(int[] height) {

		if (height.length &amp;lt;= 1) {
			return 0;
		}

		int s = 0;

		for (int i = 0; i &amp;lt; height.length; i++) {
			for (int j = i + 1; j &amp;lt; height.length; j++) {
				s = Math.max(s, area(height, i, j));
			}
		}

		return s;
	}
	
	public int area(int[] height, int i, int j) {
		return (j - i) * Math.min(height[j], height[i]);
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;2.一开始觉得应该这样写，写了半天没写对，关键点在于动左边还是动右边。动小的才有可能变大。&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	
	public int maxArea(int[] height) {

		if (height.length &amp;lt;= 1) {
			return 0;
		}

		int max = 0;
		int s = 0;
		int i = 0;
		int j = height.length - 1;

		while (i &amp;lt; j) {

			s = area(height, i, j);
			max = Math.max(max, s);

			if (height[i] &amp;gt; height[j]) {
				j--;
			} else {
				i++;
			}

		}

		return max;
	}
	
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sat, 30 Apr 2016 23:58:13 +0800</pubDate>
        <link>http://blog.dantou.cc/main/2016/04/30/LeetCode-container-with-most-water.html</link>
        <guid isPermaLink="true">http://blog.dantou.cc/main/2016/04/30/LeetCode-container-with-most-water.html</guid>
        
        
        <category>main</category>
        
      </item>
    
      <item>
        <title>LeetCode---valid-sudoku</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;题目描述&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules.
The Sudoku board could be partially filled, where empty cells are filled with the character&#39;.&#39;.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section-1&quot;&gt;程序代码&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	
	public boolean isValidSudoku(char[][] board) {

		if (board.length != 9 || board[0].length != 9) {

			return false;

		}

		for (int i = 0; i &amp;lt; board.length; i++) {
			for (int j = 0; j &amp;lt; board[0].length; j++) {
				if (board[i][j] == &#39;.&#39;) {

					continue;

				}

				for (int i2 = 0; i2 &amp;lt; i; i2++) {
					if (board[i][j] == board[i2][j]) {
						return false;
					}
				}

				for (int j2 = 0; j2 &amp;lt; j; j2++) {
					if (board[i][j] == board[i][j2]) {
						return false;
					}
				}

				for (int i2 = i - i % 3; i2 &amp;lt; i; i2++) {
					for (int j2 = j - j % 3; j2 &amp;lt; j - j % 3 + 3; j2++) {
						if (board[i][j] == board[i2][j2]) {
							return false;
						}
					}
				}
			}
		}

		return true;
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 30 Apr 2016 20:27:25 +0800</pubDate>
        <link>http://blog.dantou.cc/main/2016/04/30/LeetCode-valid-sudoku.html</link>
        <guid isPermaLink="true">http://blog.dantou.cc/main/2016/04/30/LeetCode-valid-sudoku.html</guid>
        
        
        <category>main</category>
        
      </item>
    
      <item>
        <title>LeetCode---unique-paths</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;题目描述&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A robot is located at the top-left corner of a m x n grid (marked &#39;Start&#39; in the diagram below).
The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked &#39;Finish&#39; in the diagram below).
How many possible unique paths are there?
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section-1&quot;&gt;程序代码&lt;/h1&gt;

&lt;h2 id=&quot;section-2&quot;&gt;1.好吧，狗屎一样的递归，速度太慢&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	public int uniquePaths(int m, int n) {
		if (n &amp;lt; 1 || m &amp;lt; 1) {
			return 0;
		}

		if (n == 1 &amp;amp;&amp;amp; m == 1) {
			return 0;
		}

		if (n == 1 || m == 1) {
			return 1;
		}

		return uniquePaths(n, m - 1) + uniquePaths(n - 1, m);

	}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-3&quot;&gt;2.好吧，排列组合，比最优解慢一点，阶乘不好算啊。。&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	public int uniquePaths(int m, int n) {

		if (n &amp;lt; 1 || m &amp;lt; 1) {
			return 0;
		}

		if (n == 1 || m == 1) {
			return 1;
		}

		return jiecheng(n + m - 2).divide(
				jiecheng(n - 1).multiply(jiecheng(m - 1))).intValue();
	}

	public BigDecimal jiecheng(int i) {

		if (i &amp;lt;= 0) {
			return new BigDecimal(1);
		}

		BigDecimal prob = new BigDecimal(1);
		while (i &amp;gt; 0) {
			prob = prob.multiply(new BigDecimal(i));
			i--;
		}

		return prob;
	}
	
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-4&quot;&gt;3.别人的答案&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	public int uniquePaths(int m, int n) {
		int[][] data = new int[m][n];
		for (int i = 0; i != m; ++i)
			for (int j = 0; j != n; ++j) {
				if (i == 0 || j == 0)
					data[i][j] = 1;
				else
					data[i][j] = data[i - 1][j] + data[i][j - 1];
			}
		return data[m - 1][n - 1];
	}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sat, 30 Apr 2016 19:27:30 +0800</pubDate>
        <link>http://blog.dantou.cc/main/2016/04/30/LeetCode-unique-paths.html</link>
        <guid isPermaLink="true">http://blog.dantou.cc/main/2016/04/30/LeetCode-unique-paths.html</guid>
        
        
        <category>main</category>
        
      </item>
    
      <item>
        <title>天池---阿里音乐流行趋势预测</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;竞赛题目&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;经过7年的发展与沉淀，目前阿里音乐拥有数百万的曲库资源，每天千万的用户活跃在平台上，拥有数亿人次的用户试听、收藏等行为。在原创艺人和作品方面，更是拥有数万的独立音乐人，每月上传上万个原创作品，形成超过几十万首曲目的原创作品库，如此庞大的数据资源库对于音乐流行趋势的把握有着极为重要的指引作用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;本次大赛以阿里音乐用户的历史播放数据为基础，期望参赛者可以通过对阿里音乐平台上每个阶段艺人的试听量的预测，挖掘出即将成为潮流的艺人，从而实现对一个时间段内音乐流行趋势的准确把控。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;section-1&quot;&gt;竞赛数据&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;大赛开放抽样的歌曲艺人数据，以及和这些艺人相关的6个月内（20150301-20150830）的用户行为历史记录。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;marstianchiuseractions&quot;&gt;用户行为表（mars_tianchi_user_actions）&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;列名&lt;/th&gt;
      &lt;th&gt;类型&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
      &lt;th&gt;示例&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;user_id&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;用户唯一标识&lt;/td&gt;
      &lt;td&gt;7063b3d0c075a4d276c5f06f4327cf4a&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;song_id&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;歌曲唯一标识&lt;/td&gt;
      &lt;td&gt;effb071415be51f11e845884e67c0f8c&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;gmt_create&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;用户播放时间（unix时间戳表示）精确到小时&lt;/td&gt;
      &lt;td&gt;1426406400&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;action_type&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;行为类型：1，播放；2，下载，3，收藏&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ds&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;记录收集日（分区）&lt;/td&gt;
      &lt;td&gt;20150315&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;marstianchisongs&quot;&gt;歌曲艺人（mars_tianchi_songs）&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;列名&lt;/th&gt;
      &lt;th&gt;类型&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
      &lt;th&gt;示例&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;song_id&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;歌曲唯一标识&lt;/td&gt;
      &lt;td&gt;c81f89cf7edd24930641afa2e411b09c&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;artist_id&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;歌曲所属的艺人Id&lt;/td&gt;
      &lt;td&gt;03c6699ea836decbc5c8fc2dbae7bd3b&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;publish_time&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;歌曲发行时间，精确到天&lt;/td&gt;
      &lt;td&gt;20150325&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;song_init_plays&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;歌曲的初始播放数，表明该歌曲的初始热度&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Language&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;数字表示1,2,3…&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Gender&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;1,2,3（男,女,乐队）&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;marstianchiartistplayspredict&quot;&gt;选手提交结果表（mars_tianchi_artist_plays_predict）&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;列名&lt;/th&gt;
      &lt;th&gt;类型&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
      &lt;th&gt;示例&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;artist_id&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;歌曲所属的艺人Id&lt;/td&gt;
      &lt;td&gt;023406156015ef87f99521f3b343f71f&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Plays&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;艺人当天的播放数据&lt;/td&gt;
      &lt;td&gt;5000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ds&lt;/td&gt;
      &lt;td&gt;String&lt;/td&gt;
      &lt;td&gt;日期&lt;/td&gt;
      &lt;td&gt;20150901&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;结果集：
选手需要预测艺人随后2个月，即60天（20150901-20151030）的播放数据。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;section-2&quot;&gt;解题思路&lt;/h1&gt;

&lt;h2 id=&quot;section-3&quot;&gt;1.建库建表导数据&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE DATABASE `tianchi` /*!40100 DEFAULT CHARACTER SET utf8 */

CREATE TABLE mars_tianchi_user_actions (
  `user_id` varchar(40),
  `song_id` varchar(40),
  `gmt_create` varchar(20),
  `action_type` int(2),
  `Ds` char(10)
) ENGINE=InnoDB DEFAULT CHARSET=utf8

CREATE INDEX index_user_id  ON mars_tianchi_user_actions (user_id);

CREATE TABLE mars_tianchi_songs (
  `song_id` varchar(40),
  `artist_id` varchar(40),
  `publish_time` char(10),
  `song_init_plays` int(11),
  `Language` char(5),
  `Gender` int(2)
) ENGINE=InnoDB DEFAULT CHARSET=utf8

load data infile &#39;/Users/zl/mars_tianchi_songs.csv&#39; into table mars_tianchi_songs fields terminated by &#39;,&#39; lines terminated by &#39;\n&#39;;

load data infile &#39;/Users/zl/mars_tianchi_user_actions.csv&#39; into table mars_tianchi_user_actions fields terminated by &#39;,&#39; lines terminated by &#39;\n&#39;;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sat, 30 Apr 2016 12:32:35 +0800</pubDate>
        <link>http://blog.dantou.cc/main/2016/04/30/%E5%A4%A9%E6%B1%A0-%E9%98%BF%E9%87%8C%E9%9F%B3%E4%B9%90%E6%B5%81%E8%A1%8C%E8%B6%8B%E5%8A%BF%E9%A2%84%E6%B5%8B.html</link>
        <guid isPermaLink="true">http://blog.dantou.cc/main/2016/04/30/%E5%A4%A9%E6%B1%A0-%E9%98%BF%E9%87%8C%E9%9F%B3%E4%B9%90%E6%B5%81%E8%A1%8C%E8%B6%8B%E5%8A%BF%E9%A2%84%E6%B5%8B.html</guid>
        
        
        <category>main</category>
        
      </item>
    
      <item>
        <title>LeetCode---best-time-to-buy-and-sell-stock-ii</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;题目描述&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Say you have an array for which the ith element is the price of a given stock on day i.
Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section-1&quot;&gt;程序代码&lt;/h1&gt;

&lt;h2 id=&quot;section-2&quot;&gt;1.哈哈哈，得了个第一&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	public int maxProfit(int[] prices) {
		if (prices.length &amp;lt;= 1) {
			return 0;
		}

		int min = prices[0];
		int profit = 0;
		for (int i = 1; i &amp;lt; prices.length; i++) {

			if (prices[i] - prices[i - 1] &amp;lt; 0) {
				profit += prices[i - 1] - min;
				min = prices[i];
			}

		}

		profit += prices[prices.length - 1] - min;

		return profit;
	}
	
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 29 Apr 2016 20:20:00 +0800</pubDate>
        <link>http://blog.dantou.cc/main/2016/04/29/LeetCode-best-time-to-buy-and-sell-stock-ii.html</link>
        <guid isPermaLink="true">http://blog.dantou.cc/main/2016/04/29/LeetCode-best-time-to-buy-and-sell-stock-ii.html</guid>
        
        
        <category>main</category>
        
      </item>
    
      <item>
        <title>LeetCode---best-time-to-buy-and-sell-stock</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;题目描述&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Say you have an array for which the ith element is the price of a given stock on day i.
If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section-1&quot;&gt;程序代码&lt;/h1&gt;

&lt;h2 id=&quot;on2&quot;&gt;1.写出来的就是低能，好吧O(n2)了&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	
	public int maxProfit(int[] prices) {
		if (prices.length &amp;lt;= 1) {
			return 0;
		}

		int profit = 0;
		for (int i = 0; i &amp;lt; prices.length; i++) {

			for (int j = i + 1; j &amp;lt; prices.length; j++) {
				profit = Math.max(prices[j] - prices[i], profit);
			}

		}

		return profit;
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;2.啧啧&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	public int maxProfit(int[] prices) {
		if (prices.length &amp;lt;= 1) {
			return 0;
		}

		int profit = 0;
		int min = prices[0];
		for (int i = 1; i &amp;lt; prices.length; i++) {

			min = Math.min(min, prices[i]);
			profit = Math.max(profit, prices[i] - min);

		}

		return profit;
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Fri, 29 Apr 2016 19:33:01 +0800</pubDate>
        <link>http://blog.dantou.cc/main/2016/04/29/LeetCode-best-time-to-buy-and-sell-stock.html</link>
        <guid isPermaLink="true">http://blog.dantou.cc/main/2016/04/29/LeetCode-best-time-to-buy-and-sell-stock.html</guid>
        
        
        <category>main</category>
        
      </item>
    
      <item>
        <title>LeetCode---reverse-integer</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;题目描述&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Reverse digits of an integer.
Example1: x = 123, return 321
Example2: x = -123, return -321
click to show spoilers.
Have you thought about this?
Here are some good questions to ask before coding. Bonus points for you if you have already thought through this!
If the integer&#39;s last digit is 0, what should the output be? ie, cases such as 10, 100.
Did you notice that the reversed integer might overflow? Assume the input is a 32-bit integer, then the reverse of 1000000003 overflows. How should you handle such cases?
Throw an exception? Good, but what if throwing an exception is not an option? You would then have to re-design the function (ie, add an extra parameter).
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section-1&quot;&gt;程序代码&lt;/h1&gt;

&lt;h2 id=&quot;low--117ms&quot;&gt;1.字符串（low比的我 首先想到的竟然是字符串） 117ms&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	public int reverse(int x) {
		String z = &quot;&quot;;
		String y = x + &quot;&quot;;
		if (x &amp;lt; 0) {
			y = y.substring(1);
			z = &quot;-&quot;;
			for (int i = y.length() - 1; i &amp;gt;= 0; i--) {
				z += y.charAt(i);
			}
		} else {
			for (int i = y.length() - 1; i &amp;gt;= 0; i--) {
				z += y.charAt(i);
			}
		}

		try {
			return Integer.parseInt(z);
		} catch (Exception e) {
			return 0;
		}
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;ms&quot;&gt;2.第二个想到的 85ms&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	public int reverse(int x) {

		Queue&amp;lt;Integer&amp;gt; nums = new LinkedList&amp;lt;&amp;gt;();
		int i = 1;
		while (x &amp;gt; 0) {
			nums.add(x % 10);
			x /= 10;
			i *= 10;
		}

		while (x &amp;lt; 0) {
			nums.add(x % 10);
			x /= 10;
			i *= 10;
		}

		int re = 0;

		while (!nums.isEmpty()) {
			i /= 10;
			re += nums.remove() * i;
		}

		return re;
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;ms-1&quot;&gt;3.别人的答案，好我很多64ms&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	public int reverse(int x) {
		if (x &amp;gt;= 0) {
			int p = 0;
			while (x &amp;gt; 0) {
				p = p * 10 + x % 10;
				x /= 10;
			}
			return p;
		} else {
			x = -x;
			int p = 0;
			while (x &amp;gt; 0) {
				p = p * 10 + x % 10;
				x /= 10;
			}
			return -p;
		}
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 29 Apr 2016 11:19:49 +0800</pubDate>
        <link>http://blog.dantou.cc/main/2016/04/29/LeetCode-reverse-integer.html</link>
        <guid isPermaLink="true">http://blog.dantou.cc/main/2016/04/29/LeetCode-reverse-integer.html</guid>
        
        
        <category>main</category>
        
      </item>
    
      <item>
        <title>LeetCode---maximum-depth-of-binary-tree</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;题目描述&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Given a binary tree, find its maximum depth.
The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section-1&quot;&gt;程序代码&lt;/h1&gt;

&lt;h2 id=&quot;section-2&quot;&gt;1.递归&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	class TreeNode {
		int val;
		TreeNode left;
		TreeNode right;
	
		TreeNode(int x) {
			val = x;
		}
	}

	public int maxDepth(TreeNode root) {

		if (root == null) {
			return 0;
		}

		return Math.max(maxDepth(root.left) + 1, maxDepth(root.right) + 1);
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-3&quot;&gt;2.非递归&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	public int maxDepth(TreeNode root) {

		if (root == null) {
			return 0;
		}

		List&amp;lt;TreeNode&amp;gt; tree = new LinkedList&amp;lt;TreeNode&amp;gt;();
		tree.add(root);
		
		int i = 0;
		while (tree.size() != 0) {
			List&amp;lt;TreeNode&amp;gt; tree1 = new LinkedList&amp;lt;TreeNode&amp;gt;();
			for (TreeNode node : tree) {
				tree1.add(node);
			}
			tree.clear();
			for (TreeNode node : tree1) {

				if (node.left != null) {
					tree.add(node.left);
				}

				if (node.right != null) {
					tree.add(node.right);
				}

			}
			i++;
		}
		return i;
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第一次写markdown，很烂。&lt;br /&gt;
这个题很简单，但是怎么才能优化呢。&lt;br /&gt;
看了一下其他人用C写的速度很快,也是用递归写的。&lt;/p&gt;

</description>
        <pubDate>Thu, 28 Apr 2016 22:23:12 +0800</pubDate>
        <link>http://blog.dantou.cc/main/2016/04/28/LeetCode-maximum-depth-of-binary-tree.html</link>
        <guid isPermaLink="true">http://blog.dantou.cc/main/2016/04/28/LeetCode-maximum-depth-of-binary-tree.html</guid>
        
        
        <category>main</category>
        
      </item>
    
  </channel>
</rss>
