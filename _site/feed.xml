<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The dantou&#39;s blog</title>
    <description>Welcome to the dantou&#39;s blog!
</description>
    <link>http://blog.dantou.cc/</link>
    <atom:link href="http://blog.dantou.cc/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 22 Feb 2017 13:05:12 +0800</pubDate>
    <lastBuildDate>Wed, 22 Feb 2017 13:05:12 +0800</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>test</title>
        <description>&lt;p&gt;你阿萨德那死的那丝蛋
阿 sf i 请问 i 孵化器未婚夫 i&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Feb 2017 13:04:43 +0800</pubDate>
        <link>http://blog.dantou.cc/main/2017/02/22/test.html</link>
        <guid isPermaLink="true">http://blog.dantou.cc/main/2017/02/22/test.html</guid>
        
        
        <category>main</category>
        
      </item>
    
      <item>
        <title>MapReduce之Shuffle</title>
        <description>&lt;h1 id=&quot;shuffle&quot;&gt;1.何为Shuffle&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Shuffle为map输出到reduce输入的过程，shuffle的单位是每个task。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;map&quot;&gt;2.map端&lt;/h1&gt;

&lt;h2 id=&quot;section&quot;&gt;1⃣.输入&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;map task从spilt中读取数据,执行map task，产生key－value输出。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;partitionner&quot;&gt;2⃣.Partitionner&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;reduce数量设置了很多个，那么map每一条输出应该由哪个reduce去做，这时候需要partition了，直接上代码很简单。

	public class HashPartitioner&amp;lt;K, V&amp;gt; extends Partitioner&amp;lt;K, V&amp;gt; { 

	 	 public int getPartition(K key, V value, int numReduceTasks) { 
	 	   return (key.hashCode() &amp;amp; Integer.MAX_VALUE) % numReduceTasks; 
	 	 } 

	} 

这个是默认的Partitionner，我们可以自己写，继承那类就好
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;spill&quot;&gt;3⃣.Spill&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;进行完Partion之后，需要往磁盘写了，为了减少IO对磁盘的影响，结果是先写到内存中一个缓存区中，缓存区默认大小100M，阀值默认80%，当缓存区数据超过 大小＊阀值，会启动单独线程的spill，锁定这80M内存，进行spill，map输出的数据可以继续往剩下20M写，这样一遍一遍循环。那么spill到底是什么过程
1.sort，对这80M数据按key进行排序，是MapReduce的默认行为
2.combine，如果有很多个key/value对需要发送到某个reduce端去，那么需要将这些key/value值拼接到一块，减少与partition相关的索引记录。
3.Combiner，如果设置了Combiner，会在这里运行。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;merge&quot;&gt;4⃣.Merge&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;每次溢写会在磁盘上生成一个spill文件，磁盘上可能会有多个spill文件存在。需要将这些溢写文件归并到一起，这个过程就叫做Merge。
不同spill文件中可能有相同的key，所以得merge成group。什么是group。对于&quot;aaa&quot;,1;&quot;aaa&quot;,8 merge为{“aaa”, [1,8]}
如果设置了Combiner，也会在这里运行，可以减少传到其他节点的带宽
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;reduce&quot;&gt;3.reduce端&lt;/h1&gt;

&lt;h2 id=&quot;copy&quot;&gt;1⃣.Copy&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;请求map task所在的TaskTracker获取map task的输出文件
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;merge-1&quot;&gt;2⃣.Merge&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;merge有三种形式：1)内存到内存  2)内存到磁盘  3)磁盘到磁盘。默认情况下第一种形式不启用。
当内存中的数据量到达一定阈值，就启动内存到磁盘的merge。与map 端类似，这也是溢写的过程，这个过程中如果你设置有Combiner，也是会启用的，然后在磁盘中生成了众多的溢写文件。
第二种merge方式一直在运行，直到没有map端的数据时才结束，然后启动第三种磁盘到磁盘的merge方式生成最终的那个文件。 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;reducer&quot;&gt;3⃣.Reducer的输入文件&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;不断地merge后，最后会生成一个最终文件，Shuffle结束
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Fri, 06 May 2016 11:03:31 +0800</pubDate>
        <link>http://blog.dantou.cc/main/2016/05/06/MapReduce%E4%B9%8BShuffle.html</link>
        <guid isPermaLink="true">http://blog.dantou.cc/main/2016/05/06/MapReduce%E4%B9%8BShuffle.html</guid>
        
        
        <category>main</category>
        
      </item>
    
  </channel>
</rss>
